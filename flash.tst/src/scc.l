
XON EQU $11
XOFF EQU $13

;SCC registers
WR0 EQU 0   ; Reg. pointers, various initialization commands
WR1 EQU 1   ; Transmit and Receive interrupts enables
WR2 EQU 2   ; Interrupt Vector
WR3 EQU 3   ; Receive parameters and control modes
WR4 EQU 4   ; Transmit and Receive modes and parameters
WR5 EQU 5   ; Transmit parameters and control modes
WR6 EQU 6   ; Sync Character or SDLC address
WR7 EQU 7   ; Sync Character or SDLC flag / Extended Feature and FIFO Control (WR7')
WR8 EQU 8   ; Transmit buffer
WR9 EQU 9   ; Master Interrupt control and reset commands
WR10 EQU 10 ; Miscellaneous transmit and receive control bits
WR11 EQU 11 ; Clock mode controls for receive and transmit
WR12 EQU 12 ; Lower byte of baud rate generator
WR13 EQU 13 ; Upper byte of baud rate generator
WR14 EQU 14 ; Miscellaneous control bits
WR15 EQU 15 ; External status interrupt enable control
RR0 EQU 0   ; Transmit and Receive buffer status and external status
RR1 EQU 1   ; Special Receive Condition status
RR2 EQU 2   ; Modified interrupt vector (Channel B only) / Unmodified interrupt vector (Channel A only)
RR3 EQU 3   ; Interrupt pending bits (Channel A only)
RR4 EQU 4   ; Transmit and Receive modes and parameters (WR4)
RR5 EQU 5   ; Transmit parameters and control modes (WR5)
RR6 EQU 6   ; SDLC FIFO byte counter lower byte (only when enable)
RR7 EQU 7   ; SDLC FIFO byte counter and status (only when enable)
RR8 EQU 8   ; Receive buffer
RR9 EQU 9   ; Receive parameters and control modes (WR3)
RR10 EQU 10 ; Miscellaneous status bits
RR11 EQU 11 ; Miscelaneous transmit and receive control bits (WR10)
RR12 EQU 12 ; Lower byte of baud rate generator time constant
RR13 EQU 13 ; Upper byte of baud rate generator time constant
RR14 EQU 14 ; Extended Feature and FIFO Control (WR7')
RR15 EQU 15 ; External Status interrupt information

INIT_SCC:

 LEA _TABVEC_SCC_B(PC),A0
 LEA _MCTRL_SCC_A+1(PC),A1
 MOVE.L A1,D0
 SUB.L A0,D0
 SUBQ.L #1,D0
 LEA TABVEC_SCC_B,A2
\1:MOVE.B (A0)+,(A2)+
 DBRA D0,\1
 BSR INIT_REG_SCC
 AND.L #$FFFFFFDF,FLAGS_SCC_A; normal DSR
 CLR FLAGS_LAN_SERIAL2
 BSR INIT_LAN
 BSR INIT_RSCONF
 LEA my_stack+$280000,A0
 MOVE.L A0,PTR_END
 MOVE.L RBLM2(PC),D0
 MOVE.L TBLM2(PC),D7
 MOVE.L RBLS2(PC),D5
 MOVE.L TBLS2(PC),D6
 LEA IOREC_SCC_B,A0
 BSR.S \2
 LEA IOREC_TX_SCC_B,A0
 MOVE.L D7,D0
 BSR.S \2
 MOVE.L D5,D0
 LEA IOREC_SCC_A,A0
 BSR.S \2
 LEA IOREC_TX_SCC_A,A0
 MOVE.L D6,D0
\2:MOVE.L #$100,D1
 AND.L #$FFFFFFFE,D0
 CMP.L #$80000000,D0
 BEQ.S \3
 CMP.L #$FFFE,D0
 BHI.S \3
 CMP.L #$10,D0
 BCS.S \3
 MOVE D0,D1
\3:MOVE.L PTR_END,_IBUF_RX_SCC_A-_IOREC_SCC_A(A0)
 ADD.L D1,PTR_END
 MOVE D1,_IBUFSIZE_RX_SCC_A-_IOREC_SCC_A(A0)
 CLR _IBUFHD_RX_SCC_A-_IOREC_SCC_A(A0)
 CLR _IBUFTL_RX_SCC_A-_IOREC_SCC_A(A0)
 MOVE D1,D0
 LSR #2,D1
 MOVE D1,_IBUFLOW_RX_SCC_A-_IOREC_SCC_A(A0)
 SUB D1,D0
 MOVE D0,_IBUFHI_RX_SCC_A-_IOREC_SCC_A(A0)
 RTS

RBLM2:DC.L 32768
TBLM2:DC.L 32768
RBLS2:DC.L 4096
TBLS2:DC.L 4096

SCC_B_RXAVAIL_FLOW_HARD:

 MOVEM.L D0-D1/A1,-(SP)
 MOVEQ #0,D1
 MOVE.L IBUF_RX_SCC_B,A1
 MOVE IBUFTL_RX_SCC_B,D1
\6:ADDQ #1,D1
  CMP IBUFSIZE_RX_SCC_B,D1
  BCS.S \7
  MOVEQ #0,D1
\7:MOVE.B $FFFF8C87,D0
  AND.B MASK_RX_SCC_B,D0
  CMP IBUFHD_RX_SCC_B,D1
  BEQ.S \5
  MOVE.B D0,(A1,D1.L)
 BTST #0,$FFFF8C85; Rx Character Available
 BNE.S \6
 BRA.S \3
\4:MOVE.B $FFFF8C87,D0
\5:BTST #0,$FFFF8C85; Rx Character Available
 BNE.S \4
 SUBQ #1,D1
 BCC.S \3
 ADD IBUFSIZE_RX_SCC_B,D1
\3:MOVE D1,IBUFTL_RX_SCC_B
 MOVE.B #$30,$FFFF8C85; Error Reset
 SUB IBUFHD_RX_SCC_B,D1
 BCC.S \2
 ADD IBUFSIZE_RX_SCC_B,D1
\2:CMP IBUFHI_RX_SCC_B,D1
 BCS.S \1
 BSET #7,FLAG_TX_XOFF_SCC_B
 BNE.S \1
 MOVEQ #-3,D0
 AND.B PAR_CTRL_SCC_B,D0
 MOVE.B D0,PAR_CTRL_SCC_B
 MOVE.B #WR5,$FFFF8C85; Transmit parameters and control modes
 MOVE.B D0,$FFFF8C85
\1:MOVE.B #$38,$FFFF8C85; Reset Hightest IUS
 MOVEM.L (SP)+,D0-D1/A1
 RTE

SCC_B_RXAVAIL_FLOW_SOFT:

 MOVEM.L D0-D1/A1,-(SP)
 MOVEQ #0,D1
 MOVE.L IBUF_RX_SCC_B,A1
\2:MOVE.B #$30,$FFFF8C85; Error Reset
 MOVE.B $FFFF8C87,D0
 AND.B MASK_RX_SCC_B,D0
 CMP.B #XOFF,D0
 BEQ.S \7
 CMP.B #XON,D0
 BEQ.S \6
 MOVE IBUFTL_RX_SCC_B,D1
 ADDQ #1,D1
 CMP IBUFSIZE_RX_SCC_B,D1
 BCS.S \1
 MOVEQ #0,D1
\1:CMP IBUFHD_RX_SCC_B,D1
 BEQ.S \3
 MOVE.B D0,(A1,D1.L)
 MOVE D1,IBUFTL_RX_SCC_B
 SUB IBUFHD_RX_SCC_B,D1
 BCC.S \4
 ADD IBUFSIZE_RX_SCC_B,D1
\4:CMP IBUFHI_RX_SCC_B,D1
 BCS.S \3
 BSET #7,FLAG_TX_XOFF_SCC_B
 BNE.S \3
 MOVEQ #XOFF,D0
 BTST #2,$FFFF8C85; Tx Buffer Empty
 BEQ.S \5
 MOVE.B D0,$FFFF8C87
 CLR.B D0
\5:MOVE.B D0,SEND_NOW_SCC_B
 BRA.S \3
\6:SF.B FLAG_RX_XOFF_SCC_B
 BTST #2,$FFFF8C85; Tx Buffer Empty
 BEQ.S \3
 MOVEM.L (SP)+,D0-D1/A1   
 BRA SCC_B_TXEMPTY_FLOW_SOFT     
\7:ST.B FLAG_RX_XOFF_SCC_B
\3:BTST #0,$FFFF8C85; Rx Character Available
 BNE \2
 MOVE.B #$38,$FFFF8C85; Reset Hightest IUS
 MOVEM.L (SP)+,D0-D1/A1
 RTE

SCC_B_RXAVAIL_FLOW_NONE:

 MOVEM.L D0-D1/A1,-(SP)
 MOVEQ #0,D1
 MOVE.L IBUF_RX_SCC_B,A1
 MOVE IBUFTL_RX_SCC_B,D1
\5:ADDQ #1,D1
  CMP IBUFSIZE_RX_SCC_B,D1
  BCS.S \4
  MOVEQ #0,D1
\4:MOVE.B $FFFF8C87,D0
  AND.B MASK_RX_SCC_B,D0
  CMP IBUFHD_RX_SCC_B,D1
  BEQ.S \3
  MOVE.B D0,(A1,D1.L)
 BTST #0,$FFFF8C85; Rx Character Available
 BNE.S \5
 BRA.S \1
\2:MOVE.B $FFFF8C87,D0
\3:BTST #0,$FFFF8C85; Rx Character Available
 BNE.S \2
 SUBQ #1,D1
 BCC.S \1
 ADD IBUFSIZE_RX_SCC_B,D1
\1:MOVE D1,IBUFTL_RX_SCC_B
 MOVE.B #$30,$FFFF8C85; Error Reset
 MOVE.B #$38,$FFFF8C85; Reset Hightest IUS
 MOVEM.L (SP)+,D0-D1/A1
 RTE

SCC_B_TXEMPTY_FLOW_HARD:

 BTST #5,$FFFF8C85; CTS
 BNE.S SCC_B_TXEMPTY_FLOW_NONE
 MOVE.B #$28,$FFFF8C85; Reset TX Int Pending
 MOVE.B #$38,$FFFF8C85; Reset Hightest IUS
 RTE

SCC_B_TXEMPTY_FLOW_NONE:

 MOVEM.L D1/A1,-(SP)
 MOVEQ #0,D1
 MOVE IBUFHD_TX_SCC_B,D1
 MOVE.L IBUF_TX_SCC_B,A1
\4:CMP IBUFTL_TX_SCC_B,D1
  BEQ.S \2
  ADDQ #1,D1
  CMP IBUFSIZE_TX_SCC_B,D1
  BCS.S \3
  MOVEQ #0,D1
\3:MOVE.B (A1,D1.L),$FFFF8C87
 BTST #2,$FFFF8C85; Tx Buffer Empty
 BNE.S \4
 BRA.S \1
\2:MOVE.B #$28,$FFFF8C85; Reset TX Int Pending
\1:MOVE D1,IBUFHD_TX_SCC_B
 MOVEM.L (SP)+,D1/A1
 MOVE.B #$38,$FFFF8C85; Reset Hightest IUS
 RTE

SCC_B_TXEMPTY_FLOW_SOFT:

 MOVEM.L D0-D1/A1,-(SP)
 MOVEQ #0,D1
 MOVE IBUFHD_TX_SCC_B,D1
 MOVE.L IBUF_TX_SCC_B,A1
 MOVE.B SEND_NOW_SCC_B,D0
 CLR.B SEND_NOW_SCC_B
 TST.B D0
 BNE.S \4
\3:CMP IBUFTL_TX_SCC_B,D1
  BEQ.S \2
  TST.B FLAG_RX_XOFF_SCC_B
  BNE.S \2
  ADDQ #1,D1
  CMP IBUFSIZE_TX_SCC_B,D1
  BCS.S \5
  MOVEQ #0,D1
\5:MOVE.B (A1,D1.L),D0
  MOVE D1,IBUFHD_TX_SCC_B
\4:MOVE.B D0,$FFFF8C87
 BTST #2,$FFFF8C85; Tx Buffer Empty
 BNE.S \3
 BRA.S \1
\2:MOVE.B #$28,$FFFF8C85; Reset TX Int Pending
\1:MOVE.B #$38,$FFFF8C85; Reset Hightest IUS
 MOVEM.L (SP)+,D0-D1/A1
 RTE

SCC_B_STCHANGE:

 CMP.B #2,FLOW_SCC_B
 BNE.S \1
 BTST #5,$FFFF8C85; CTS
 BEQ.S \1
 BTST #2,$FFFF8C85; Tx Buffer Empty
 BEQ.S \1
 MOVE.B #$10,$FFFF8C85; Reset Ext/Status Interrupts
 BRA SCC_B_TXEMPTY_FLOW_HARD
\1:MOVE.B #$10,$FFFF8C85; Reset Ext/Status Interrupts
 MOVE.B #$38,$FFFF8C85; Reset Hightest IUS
 RTE
 
SCC_A_RXAVAIL_FLOW_HARD:
 
 MOVEM.L D0-D1/A1,-(SP)
 MOVEQ #0,D1
 MOVE.L IBUF_RX_SCC_A,A1
 MOVE IBUFTL_RX_SCC_A,D1
\7:ADDQ #1,D1
  CMP IBUFSIZE_RX_SCC_A,D1
  BCS.S \8
  MOVEQ #0,D1
\8:MOVE.B $FFFF8C83,D0
  AND.B MASK_RX_SCC_A,D0
  CMP IBUFHD_RX_SCC_A,D1
  BEQ.S \6
  MOVE.B D0,(A1,D1.L)
 BTST #0,$FFFF8C81; Rx Character Available
 BNE.S \7
 BRA.S \4
\5:MOVE.B $FFFF8C83,D0
\6:BTST #0,$FFFF8C81; Rx Character Available
 BNE.S \5
 SUBQ #1,D1
 BCC.S \4
 ADD IBUFSIZE_RX_SCC_A,D1
\4:MOVE D1,IBUFTL_RX_SCC_A
 MOVE.B #$30,$FFFF8C81; Error Reset
 SUB IBUFHD_RX_SCC_A,D1
 BCC.S \3
 ADD IBUFSIZE_RX_SCC_A,D1
\3:CMP IBUFHI_RX_SCC_A,D1
 BCS.S \1
 BSET #7,FLAG_TX_XOFF_SCC_A
 BNE.S \1
 MOVEQ #-3,D0
 BTST #1,FLAGS_SCC_A+3
 BNE.S \2
 MOVEQ #$7F,D0
\2:AND.B PAR_CTRL_SCC_A,D0
 MOVE.B D0,PAR_CTRL_SCC_A
 MOVE.B #WR5,$FFFF8C81; Transmit parameters and control modes
 MOVE.B D0,$FFFF8C81
\1:MOVE.B #$38,$FFFF8C81; Reset Hightest IUS
 MOVEM.L (SP)+,D0-D1/A1
 RTE

SCC_A_RXAVAIL_FLOW_SOFT:

 MOVEM.L D0-D1/A1,-(SP)
 MOVEQ #0,D1
 MOVE.L IBUF_RX_SCC_A,A1
\3:MOVE.B #$30,$FFFF8C81; Error Reset
 MOVE.B $FFFF8C83,D0
 AND.B MASK_RX_SCC_A,D0
 CMP.B #XOFF,D0
 BEQ.S \7
 CMP.B #XON,D0
 BEQ.S \6
 MOVE IBUFTL_RX_SCC_A,D1
 ADDQ #1,D1
 CMP IBUFSIZE_RX_SCC_A,D1
 BCS.S \1
 MOVEQ #0,D1
\1:CMP IBUFHD_RX_SCC_A,D1
 BEQ.S \2
 MOVE.B D0,(A1,D1.L)
 MOVE D1,IBUFTL_RX_SCC_A
 SUB IBUFHD_RX_SCC_A,D1
 BCC.S \4
 ADD IBUFSIZE_RX_SCC_A,D1
\4:CMP IBUFHI_RX_SCC_A,D1
 BCS.S \2
 BSET #7,FLAG_TX_XOFF_SCC_A
 BNE.S \2
 MOVEQ #XOFF,D0
 BTST #2,$FFFF8C81; Tx Buffer Empty
 BEQ.S \5
 MOVE.B D0,$FFFF8C83
 CLR.B D0
\5:MOVE.B D0,SEND_NOW_SCC_A
 BRA.S \2
\6:SF.B FLAG_RX_XOFF_SCC_A
 BTST #2,$FFFF8C81; Tx Buffer Empty
 BEQ.S \2
 MOVEM.L (SP)+,D0-D1/A1
 BRA SCC_A_TXEMPTY_FLOW_SOFT
\7:ST.B FLAG_RX_XOFF_SCC_A
\2:BTST #0,$FFFF8C81; Rx Character Available
 BNE \3
 MOVE.B #$38,$FFFF8C81; Reset Hightest IUS
 MOVEM.L (SP)+,D0-D1/A1
 RTE

SCC_A_RXAVAIL_FLOW_NONE:

 MOVEM.L D0-D1/A1,-(SP)
 MOVEQ #0,D1
 MOVE.L IBUF_RX_SCC_A,A1
 MOVE IBUFTL_RX_SCC_A,D1
\4:ADDQ #1,D1
  CMP IBUFSIZE_RX_SCC_A,D1
  BCS.S \5
  MOVEQ #0,D1
\5:MOVE.B $FFFF8C83,D0
  AND.B MASK_RX_SCC_A,D0
  CMP IBUFHD_RX_SCC_A,D1
  BEQ.S \3
  MOVE.B D0,(A1,D1.L)
 BTST #0,$FFFF8C81; Rx Character Available
 BNE.S \4
 BRA.S \1
\2:MOVE.B $FFFF8C83,D0
\3:BTST #0,$FFFF8C81; Rx Character Available
 BNE.S \2
 SUBQ #1,D1
 BCC.S \1
 ADD IBUFSIZE_RX_SCC_A,D1
\1:MOVE D1,IBUFTL_RX_SCC_A
 MOVE.B #$30,$FFFF8C81; Error Reset
 MOVE.B #$38,$FFFF8C81; Reset Hightest IUS
 MOVEM.L (SP)+,D0-D1/A1
 RTE

SCC_A_TXEMPTY_FLOW_HARD:

 MOVEM.L D1/A1,-(SP)
 BTST #5,$FFFF8C81; CTS
 SEQ.B D1
 MOVE D0,-(SP)
 MOVE.B FLAGS_SCC_A+3,D0
 EOR.B D0,D1
 MOVE (SP)+,D0
 BTST #1,D1
 BNE.S SCC_A_TXEMPTY_FLOW_NONE_BIS
 MOVE.B #$28,$FFFF8C81; Reset TX Int Pending
 MOVE.B #$38,$FFFF8C81; Reset Hightest IUS
 MOVEM.L (SP)+,D1/A1
 RTE

SCC_A_TXEMPTY_FLOW_NONE:

 MOVEM.L D1/A1,-(SP)
SCC_A_TXEMPTY_FLOW_NONE_BIS:
 MOVEQ #0,D1
 MOVE IBUFHD_TX_SCC_A,D1
 MOVE.L IBUF_TX_SCC_A,A1
\4:CMP IBUFTL_TX_SCC_A,D1
  BEQ.S \2
  ADDQ #1,D1
  CMP IBUFSIZE_TX_SCC_A,D1
  BCS.S \3
  MOVEQ #0,D1
\3:MOVE.B (A1,D1.L),$FFFF8C83
 BTST #2,$FFFF8C81; Tx Buffer Empty
 BNE.S \4
 BRA.S \1
\2:MOVE.B #$28,$FFFF8C81; Reset TX Int Pending
\1:MOVE D1,IBUFHD_TX_SCC_A
 MOVEM.L (SP)+,D1/A1
 MOVE.B #$38,$FFFF8C81; Reset Hightest IUS
 RTE

SCC_A_TXEMPTY_FLOW_SOFT:

 MOVEM.L D0-D1/A1,-(SP)
 MOVEQ #0,D1
 MOVE IBUFHD_TX_SCC_A,D1
 MOVE.L IBUF_TX_SCC_A,A1
 MOVE.B SEND_NOW_SCC_A,D0
 CLR.B SEND_NOW_SCC_A
 TST.B D0
 BNE.S \4
\3:CMP IBUFTL_TX_SCC_A,D1
  BEQ.S \2
  TST.B FLAG_RX_XOFF_SCC_A
  BNE.S \2
  ADDQ #1,D1
  CMP IBUFSIZE_TX_SCC_A,D1
  BCS.S \5
  MOVEQ #0,D1
\5:MOVE.B (A1,D1.L),D0
  MOVE D1,IBUFHD_TX_SCC_A
\4:MOVE.B D0,$FFFF8C83
 BTST #2,$FFFF8C81; Tx Buffer Empty
 BNE.S \3
 BRA.S \1
\2:MOVE.B #$28,$FFFF8C81; Reset TX Int Pending
\1:MOVE.B #$38,$FFFF8C81; Reset Hightest IUS
 MOVEM.L (SP)+,D0-D1/A1
 RTE

SCC_A_STCHANGE:

 CMP.B #2,FLOW_SCC_A
 BNE.S \1
 BTST #1,FLAGS_SCC_A+3
 BNE.S \2
 BTST #5,$FFFF8C81; CTS
 BNE.S \1
 BTST #2,$FFFF8C81; Tx Buffer Empty
 BEQ.S \1
 MOVE.B #$10,$FFFF8C81; Reset Ext/Status Interrupts
 BRA SCC_A_TXEMPTY_FLOW_HARD
\2:BTST #5,$FFFF8C81; CTS
 BEQ.S \1
 BTST #2,$FFFF8C81; Tx Buffer Empty
 BEQ.S \1
 MOVE.B #$10,$FFFF8C81; Reset Ext/Status Interrupts
 BRA SCC_A_TXEMPTY_FLOW_HARD
\1:MOVE.B #$10,$FFFF8C81; Reset Ext/Status Interrupts
 MOVE.B #$38,$FFFF8C81; Reset Hightest IUS
 RTE

BCONOUT_SCC_B:

 MOVEQ #1,D1
 ADD IBUFTL_TX_SCC_B,D1
 MOVE IBUFSIZE_TX_SCC_B,D2
 CMP D2,D1
 BCS.S \9
 MOVEQ #0,D1
\9:MOVE.L IBUF_TX_SCC_B,A1
 MOVE.B D0,(A1,D1.L)
 MOVE D1,IBUFTL_TX_SCC_B
\3:MOVE SR,D0
 OR #$700,SR
 BTST #2,$FFFF8C85; Tx Buffer Empty
 BEQ.S \5
 CMP.B #1,FLOW_SCC_B
 BLS.S \7
 BTST #5,$FFFF8C85; CTS
 BEQ.S \5
\6:MOVE IBUFHD_TX_SCC_B,D1
  CMP IBUFTL_TX_SCC_B,D1
  BEQ.S \2
  ADDQ #1,D1
  CMP D2,D1
  BCS.S \8
  MOVEQ #0,D1
\8:MOVE.B (A1,D1.L),$FFFF8C87
  MOVE D1,IBUFHD_TX_SCC_B
  TST.B $FFFFFA01
  TST.B $FFFFFA01
\2:MOVE D0,SR
  BRA.S \1
\7:BCS.S \6
 TST.B FLAG_RX_XOFF_SCC_B
 BEQ.S \6
\5:MOVE D0,SR
 MOVE IBUFHD_TX_SCC_B,D1
 SUB IBUFTL_TX_SCC_B,D1
 BHI.S \4
 ADD D2,D1
\4:SUBQ #1,D1
 BEQ.S \3
\1:RTS

BCOSTAT_SCC_B:

 MOVE IBUFHD_TX_SCC_B,D1
 SUB IBUFTL_TX_SCC_B,D1
 BHI.S \1
 ADD IBUFSIZE_TX_SCC_B,D1
\1:SUBQ #3,D1
 SCC.B D0
 EXT.W D0
 EXT.L D0
 RTS

BCONIN_SCC_B:

 MOVEQ #0,D1
 MOVEQ #0,D0
 MOVE IBUFHD_RX_SCC_B,D1
\6:CMP IBUFTL_RX_SCC_B,D1
 BEQ.S \6
 ADDQ #1,D1
 CMP IBUFSIZE_RX_SCC_B,D1
 BCS.S \5
 MOVEQ #0,D1
\5:MOVE.L IBUF_RX_SCC_B,A1
 MOVE.B (A1,D1.L),D0
 MOVE D1,IBUFHD_RX_SCC_B
 TST.B FLOW_SCC_B
 BEQ.S \1
 TST.B FLAG_TX_XOFF_SCC_B
 BEQ.S \1
 MOVE IBUFTL_RX_SCC_B,D1
 SUB IBUFHD_RX_SCC_B,D1
 BCC.S \4
 ADD IBUFSIZE_RX_SCC_B,D1
\4:CMP IBUFLOW_RX_SCC_B,D1
 BHI.S \1
 SF.B FLAG_TX_XOFF_SCC_B
 MOVE SR,D2
 OR #$700,SR
 BTST #1,FLOW_SCC_B
 BEQ.S \3
 MOVEQ #2,D1
 OR.B PAR_CTRL_SCC_B,D1
 MOVE.B D1,PAR_CTRL_SCC_B
 MOVE.B #WR5,$FFFF8C85; Transmit parameters and control modes
 MOVE.B D1,$FFFF8C85
 MOVE D2,SR
 BRA.S \1
\3:MOVEQ #XON,D1
 BTST #2,$FFFF8C85; Tx Buffer Empty
 BEQ.S \2
 MOVE.B D1,$FFFF8C87
 MOVE D2,SR
 BRA.S \1
\2:MOVE D2,SR
 MOVE.B D1,SEND_NOW_SCC_B
\1:RTS

BCONSTAT_SCC_B:

 MOVEQ #-1,D0
 MOVE IBUFHD_RX_SCC_B,D1
 CMP IBUFTL_RX_SCC_B,D1
 BNE.S \1
 MOVEQ #0,D0
\1:RTS

BCONOUT_SCC_A:

 MOVEQ #1,D1
 ADD IBUFTL_TX_SCC_A,D1
 MOVE IBUFSIZE_TX_SCC_A,D2
 CMP D2,D1
 BCS.S \10
 MOVEQ #0,D1
\10:MOVE.L IBUF_TX_SCC_A,A1
 MOVE.B D0,(A1,D1.L)
 MOVE D1,IBUFTL_TX_SCC_A
\3:MOVE SR,D0
 OR #$700,SR
 BTST #2,$FFFF8C81; Tx Buffer Empty
 BEQ.S \5
 CMP.B #1,FLOW_SCC_A
 BLS.S \7
 BTST #1,FLAGS_SCC_A+3
 BEQ.S \9
 BTST #5,$FFFF8C81; CTS
 BEQ.S \5
\6:MOVE IBUFHD_TX_SCC_A,D1
  CMP IBUFTL_TX_SCC_A,D1
  BEQ.S \2
  ADDQ #1,D1
  CMP D2,D1
  BCS.S \8
  MOVEQ #0,D1
\8:MOVE.B (A1,D1.L),$FFFF8C83
  MOVE D1,IBUFHD_TX_SCC_A
  TST.B $FFFFFA01
  TST.B $FFFFFA01
\2:MOVE D0,SR
  BRA.S \1
\9:BTST #5,$FFFF8C81; CTS
 BEQ.S \6
 BRA.S \5
\7:BCS.S \6
 TST.B FLAG_RX_XOFF_SCC_A
 BEQ.S \6
\5:MOVE IBUFHD_TX_SCC_A,D1
 SUB IBUFTL_TX_SCC_A,D1
 BHI.S \4
 ADD D2,D1
\4:SUBQ #1,D1
 BEQ.S \3
\1:RTS

BCOSTAT_SCC_A:

 MOVE IBUFHD_TX_SCC_A,D1
 SUB IBUFTL_TX_SCC_A,D1
 BHI.S \1
 ADD IBUFSIZE_TX_SCC_A,D1
\1:SUBQ #3,D1
 SCC.B D0
 EXT.W D0
 EXT.L D0
 RTS

BCONIN_SCC_A:

 MOVEQ #0,D1
 MOVEQ #0,D0
 MOVE IBUFHD_RX_SCC_A,D1
\7:CMP IBUFTL_RX_SCC_A,D1
 BEQ.S \7
 ADDQ #1,D1
 CMP IBUFSIZE_RX_SCC_A,D1
 BCS.S \6
 MOVEQ #0,D1
\6:MOVE.L IBUF_RX_SCC_A,A1
 MOVE.B (A1,D1.L),D0
 MOVE D1,IBUFHD_RX_SCC_A
 TST.B FLOW_SCC_A
 BEQ.S \1
 TST.B FLAG_TX_XOFF_SCC_A
 BEQ.S \1
 MOVE IBUFTL_RX_SCC_A,D1
 SUB IBUFHD_RX_SCC_A,D1
 BCC.S \5
 ADD IBUFSIZE_RX_SCC_A,D1
\5:CMP IBUFLOW_RX_SCC_A,D1
 BHI.S \1
 SF.B FLAG_TX_XOFF_SCC_A
 MOVE SR,D2
 OR #$700,SR
 BTST #1,FLOW_SCC_A
 BEQ.S \3
 MOVEQ #2,D1
 BTST #1,FLAGS_SCC_A+3
 BNE.S \4
 MOVEQ #-$80,D1
\4:OR.B PAR_CTRL_SCC_A,D1
 MOVE.B D1,PAR_CTRL_SCC_A
 MOVE.B #WR5,$FFFF8C81; Transmit parameters and control modes
 MOVE.B D1,$FFFF8C81
 MOVE D2,SR
 BRA.S \1
\3:MOVEQ #XON,D1
 BTST #2,$FFFF8C81; Tx Buffer Empty
 BEQ.S \2
 MOVE.B D1,$FFFF8C83
 MOVE D2,SR
 BRA.S \1
\2:MOVE D2,SR
 MOVE.B D1,SEND_NOW_SCC_A
\1:RTS

BCONSTAT_SCC_A:

 MOVEQ #-1,D0
 MOVE IBUFHD_RX_SCC_A,D1
 CMP IBUFTL_RX_SCC_A,D1
 BNE.S \1
 MOVEQ #0,D0
\1:RTS

RSCONF_SCC_A:

 LEA IOREC_SCC_A,A0
 LEA $FFFF8C81,A2
 BRA.S RSCONF_SCC

RSCONF_SCC_B:

 LEA IOREC_SCC_B,A0
 LEA $FFFF8C85,A2

RSCONF_SCC:

 MOVEM.L D3-D4/A3,-(SP)
 MOVEQ #0,D0
 CMP #-300,16(SP)
 BNE \12
 MOVE.L _SPEED_SCC_A-_IOREC_SCC_A(A0),D0
 MOVE.L 18(SP),D1
 BMI \1
 MOVE.L D1,D0
 BSR SEARCH_SPEED
 TST.L D0
 BMI \1
 MOVE.L _SPEED_SCC_A-_IOREC_SCC_A(A0),D2
 MOVE.L D0,_SPEED_SCC_A-_IOREC_SCC_A(A0)
 MOVE.L D2,D0
 BSR SCC_BAUD_RATE
 BRA \1
\12:CMP #-2,16(SP)
 BNE.S \11
 MOVE.B _INDEX_SPEED_SCC_A-_IOREC_SCC_A(A0),D0
 BRA \1
\11:MOVE.B _UCR_SCC_A-_IOREC_SCC_A(A0),D0
 ASL #8,D0
 SWAP D0
 MOVE.B _PAR_CTRL_SCC_A-_IOREC_SCC_A(A0),D0
 LSR.B #1,D0
 AND.B #8,D0
 ASL #8,D0
 MOVE 16(SP),D1;speed
 CMP #15,D1
 BHI \10
 MOVE D1,D2
 LSL #2,D2
 MOVE.L _TAB_SPEED_SCC_A-_IOREC_SCC_A(A0,D2),_SPEED_SCC_A-_IOREC_SCC_A(A0)
 BSR SCC_BAUD_RATE
  LINK A6,#-10
  MOVEM.L D0-D1/A0,-(SP) 
  CLR -2(A6)
  MOVE.L _SPEED_SCC_A-_IOREC_SCC_A(A0),D0
  MOVEQ #9,D1
  LEA -10(A6),A0
  bsr CONV_DECI
  pea string_scc1(pc)
  bsr display_string
  addq.w #4,sp  
  MOVEM.L (SP),D0-D1/A0
  CMP.L #IOREC_SCC_A,A0
  SNE.B D0
  AND #1,D0
  ADD.B #"A",D0
  move D0,-(sp)
  bsr display_char
  addq.w #2,sp
  pea string_scc2(pc)
  bsr display_string
  addq.w #4,sp  
  pea -10(A6)
  bsr display_string
  addq.w #4,sp
  MOVEM.L (SP)+,D0-D1/A0
  UNLK A6
\10:MOVE SR,D4
 MOVE 18(SP),D2;flow
 CMP #3,D2
 BHI \5
 BNE.S \9
 MOVEQ #1,D2
\9:MOVE D2,D3
 LSL #3,D3
 MOVE.L _TABVEC_SCC_A-_IOREC_SCC_A(A0),A3; vector
  movem.l d0/a0,-(sp)
  pea string_scc3(pc)
  bsr display_string
  addq.w #4,sp  
  move.l a3,d0
  lsr.l #2,d0
  BSR HEX_D0
  move #" ",-(sp)
  bsr display_char
  addq.w #2,sp  
  move #"(",-(sp)
  bsr display_char
  addq.w #2,sp 
  move #"$",-(sp)
  bsr display_char
  addq.w #2,sp 
  move.l a3,d0
  bsr AFF_HEX_WORD_D0
  move #")",-(sp)
  bsr display_char
  addq.w #2,sp   
  pea string_scc4(pc)
  bsr display_string
  addq.w #4,sp   
  movem.l (sp)+,d0/a0
 MOVE.L _TABVEC_SCC_A-_IOREC_SCC_A+4(A0,D3),D1
 LEA _IOREC_SCC_A(PC),A1
 ADD.L A1,D1
 MOVE.L D1,(A3); txempty
 MOVE.L _TABVEC_SCC_A-_IOREC_SCC_A+8(A0,D3),D1
 ADD.L A1,D1
 MOVE.L D1,16(A3); rxavail
 MOVE.L D1,24(A3); special
 CMP.B _FLOW_SCC_A-_IOREC_SCC_A(A0),D2
 BEQ.S \5
 MOVE.B D2,_FLOW_SCC_A-_IOREC_SCC_A(A0)
 CLR.B _FLAG_TX_XOFF_SCC_A-_IOREC_SCC_A(A0)
 CLR.B _FLAG_RX_XOFF_SCC_A-_IOREC_SCC_A(A0)
 OR #$700,SR
 MOVE.B _PAR_CTRL_SCC_A-_IOREC_SCC_A(A0),D1
 OR.B #2,D1
 BTST #1,_FLAGS_SCC_A+3-_IOREC_SCC_A(A0)
 BNE.S \8
 OR.B #$80,D1
\8:MOVE.B D1,_PAR_CTRL_SCC_A-_IOREC_SCC_A(A0)
 MOVE.B #WR5,(A2); Transmit parameters and control modes
 MOVE.B D1,(A2)
 CMP.B #1,D2
 BNE.S \6
 BTST #2,(A2)
 BEQ.S \7
 MOVE.B #XON,(A2)
 BRA.S \6
\7:MOVE.B #XON,_SEND_NOW_SCC_A-_IOREC_SCC_A(A0)
\6:MOVE D4,SR
\5:MOVE 20(SP),D1;ucr
 BMI.S \4
 MOVE.B D1,_UCR_SCC_A-_IOREC_SCC_A(A0)
 AND #$60,D1
 LSR.B #5,D1
 MOVEQ #-1,D2
 LSR.B D1,D2
 MOVE.B D2,_MASK_RX_SCC_A-_IOREC_SCC_A(A0)
 MOVEQ #-$61,D2
 AND.B _PAR_CTRL_SCC_A-_IOREC_SCC_A(A0),D2
 OR.B SCC_TRANSMIT_PARAM(PC,D1),D2
 MOVE.B D2,_PAR_CTRL_SCC_A-_IOREC_SCC_A(A0)
 OR #$700,SR
 MOVE.B #WR5,(A2); Transmit parameters and control modes
 MOVE.B D2,(A2)
 MOVE.B #WR3,(A2); Receive parameters and control modes
 MOVE.B SCC_RECEIVE_PARAM(PC,D1),(A2)
 MOVEQ #$1E,D2
 AND 20(SP),D2;ucr
 LSR.B #2,D2
 ROR.B #1,D2
 ROXL.B #2,D2
 MOVE.B _MODE_PAR_SCC_A-_IOREC_SCC_A(A0),D1
 AND.B #$F0,D1
 OR.B D1,D2
 MOVE.B D2,_MODE_PAR_SCC_A-_IOREC_SCC_A(A0)
 MOVE.B #WR4,(A2); Transmit and Receive modes and parameters
 MOVE.B D2,(A2)
\4:MOVE 24(SP),D1;tsr
 BMI.S \2
 MOVEQ #-$11,D2
 AND.B _PAR_CTRL_SCC_A-_IOREC_SCC_A(A0),D2
 BTST #3,D1;break detected
 BEQ.S \3
 OR.B #$10,D2
\3:MOVE.B D2,_PAR_CTRL_SCC_A-_IOREC_SCC_A(A0)
 MOVE.B #WR5,(A2); Transmit parameters and control modes
 MOVE.B D2,(A2)
\2:MOVE D4,SR
\1:MOVEM.L (SP)+,D3-D4/A3
 RTS
 
SCC_TRANSMIT_PARAM:DC.B $60,$20,$40,$00

SCC_RECEIVE_PARAM:DC.B $C1,$41,$81,$01

SEARCH_SPEED:

 MOVEM.L D2-D5,-(SP)
 MOVEQ #-1,D3
 MOVEQ #-1,D4
 MOVEQ #-1,D5
 MOVE #64-4,D1
\3:MOVE.L D0,D2
  CMP.L _TAB_SPEED_SCC_A-_IOREC_SCC_A(A0,D1),D5
  BLS.S \5
  MOVE.L _TAB_SPEED_SCC_A-_IOREC_SCC_A(A0,D1),D5
\5:SUB.L _TAB_SPEED_SCC_A-_IOREC_SCC_A(A0,D1),D2
  BEQ.S \1
  BCS.S \4
  CMP.L D3,D2
  BCC.S \4
  MOVE.L D2,D3
  MOVE D1,D4
\4:SUBQ #4,D1
 BCC.S \3
 MOVE.L D5,D0
 TST D4
 BMI.S \2
 MOVE.L _TAB_SPEED_SCC_A-_IOREC_SCC_A(A0,D4),D0
 MOVE D4,D1
\2:BSET #$1F,D0
\1:LSR #2,D1
 MOVEM.L (SP)+,D2-D5
 RTS
 
SCC_BAUD_RATE:

 MOVE.B D1,_INDEX_SPEED_SCC_A-_IOREC_SCC_A(A0)
 ADD D1,D1
 MOVE _TAB_SPEED_REG_SCC_A-_IOREC_SCC_A(A0,D1),D1
 MOVE SR,D4
 OR #$700,SR
 MOVE.B #WR12,(A2); Lower byte of baud rate generator
 MOVE.B D1,(A2)
 LSR #8,D1
 MOVE.B #WR13,(A2); Upper byte of baud rate generator
 CMP.B #$F0,D1
 BCS.S \3
 MOVE.B #0,(A2)
 BRA.S \2
\3:MOVE.B D1,(A2)
 MOVE.B #6,D1
\2:MOVEQ #2,D2
 OR.B _MCTRL_SCC_A-_IOREC_SCC_A(A0),D2
 TST.B D1
 BPL.S \1
 AND.B #$FD,D2
\1:MOVE.B D2,_MCTRL_SCC_A-_IOREC_SCC_A(A0)
 MOVE.B #WR14,(A2); Miscellaneous control bits
 MOVE.B D2,(A2)
 MOVEQ #$C,D3
 AND.B D1,D3
 LSL.B #4,D3
 MOVEQ #$3F,D2
 AND.B _MODE_PAR_SCC_A-_IOREC_SCC_A(A0),D2
 OR.B D3,D2
 MOVE.B D2,_MODE_PAR_SCC_A-_IOREC_SCC_A(A0)
 MOVE.B #WR4,(A2); Transmit and Receive modes and parameters
 MOVE.B D2,(A2)
 AND.B #3,D1
 LSL.B #3,D1
 MOVEQ #2,D2
 OR.B D1,D2
 LSL.B #2,D1
 OR.B D1,D2
 MOVE.B #WR11,(A2); Clock mode controls for receive and transmit
 MOVE.B D2,(A2)
 MOVE D4,SR
 RTS

_TABVEC_SCC_B:

 DC.L $180; vecteur
 DC.L SCC_B_TXEMPTY_FLOW_NONE-_IOREC_SCC_A
 DC.L SCC_B_RXAVAIL_FLOW_NONE-_IOREC_SCC_A
 DC.L SCC_B_TXEMPTY_FLOW_SOFT-_IOREC_SCC_A; & both
 DC.L SCC_B_RXAVAIL_FLOW_SOFT-_IOREC_SCC_A; & both
 DC.L SCC_B_TXEMPTY_FLOW_HARD-_IOREC_SCC_A
 DC.L SCC_B_RXAVAIL_FLOW_HARD-_IOREC_SCC_A 
 
_TAB_SPEED_REG_SCC_B:
 
 DC.W $B
 DC.W $18
 DC.W $32
 DC.W $44
 DC.W $67
 DC.W $7C
 DC.W $8A
 DC.W $D0
 DC.W $1A1
 DC.W $345
 DC.W $F400
 DC.W $F800
 DC.W $FC00
 DC.W $FD00
 DC.W $F500
 DC.W $F900

_TAB_SPEED_SCC_B:

 DC.L 19200
 DC.L 9600
 DC.L 4800
 DC.L 3600
 DC.L 2400
 DC.L 2000
 DC.L 1800
 DC.L 1200
 DC.L 600
 DC.L 300
 DC.L 230400
 DC.L 115200
 DC.L 57600
 DC.L 38400
 DC.L 153600
 DC.L 76800
 
_IOREC_SCC_B:

_IBUF_RX_SCC_B:DC.L $FFFFFFE0
_IBUFSIZE_RX_SCC_B:DC.W 16
_IBUFHD_RX_SCC_B:DC.W 0
_IBUFTL_RX_SCC_B:DC.W 0
_IBUFLOW_RX_SCC_B:DC.W 4
_IBUFHI_RX_SCC_B:DC.W 12
 
_IOREC_TX_SCC_B:

_IBUF_TX_SCC_B:DC.L $FFFFFFF0
_IBUFSIZE_TX_SCC_B:DC.W 16
_IBUFHD_TX_SCC_B:DC.W 0
_IBUFTL_TX_SCC_B:DC.W 0
_IBUFLOW_TX_SCC_B:DC.W 4
_IBUFHI_TX_SCC_B:DC.W 12

_UCR_SCC_B:DC.B $84
_PAR_CTRL_SCC_B:DC.B $EA
_FLAG_TX_XOFF_SCC_B:DC.B 0
_FLAG_RX_XOFF_SCC_B:DC.B 0
_FLOW_SCC_B:DC.B 0
_SEND_NOW_SCC_B:DC.B 0
_INDEX_SPEED_SCC_B:DC.B 0
_MASK_RX_SCC_B:DC.B $FF
_SPEED_SCC_B:DC.L 19200
_FLAGS_SCC_B:DC.L $7A
_MODE_PAR_SCC_B:DC.B $44
_MCTRL_SCC_B:DC.B 3
 
_TABVEC_SCC_A: 

 DC.L $1A0; vecteur
 DC.L SCC_A_TXEMPTY_FLOW_NONE-_IOREC_SCC_A
 DC.L SCC_A_RXAVAIL_FLOW_NONE-_IOREC_SCC_A
 DC.L SCC_A_TXEMPTY_FLOW_SOFT-_IOREC_SCC_A; & both
 DC.L SCC_A_RXAVAIL_FLOW_SOFT-_IOREC_SCC_A; & both
 DC.L SCC_A_TXEMPTY_FLOW_HARD-_IOREC_SCC_A
 DC.L SCC_A_RXAVAIL_FLOW_HARD-_IOREC_SCC_A
 
_TAB_SPEED_REG_SCC_A:

 DC.W $B
 DC.W $18
 DC.W $32
 DC.W $44
 DC.W $67
 DC.W $7C
 DC.W $8A
 DC.W $D0
 DC.W $1A1
 DC.W $345
 DC.W $F400
 DC.W $F800
 DC.W $FC00
 DC.W $F601
 DC.W $D1A
 DC.W $13A8

_TAB_SPEED_SCC_A:

 DC.L 19200
 DC.L 9600
 DC.L 4800
 DC.L 3600
 DC.L 2400
 DC.L 2000
 DC.L 1800
 DC.L 1200
 DC.L 600
 DC.L 300
 DC.L 230400
 DC.L 115200
 DC.L 57600
 DC.L 38400
 DC.L 75
 DC.L 50

_IOREC_SCC_A:

_IBUF_RX_SCC_A:DC.L $FFFFFFC0
_IBUFSIZE_RX_SCC_A:DC.W 16
_IBUFHD_RX_SCC_A:DC.W 0
_IBUFTL_RX_SCC_A:DC.W 0
_IBUFLOW_RX_SCC_A:DC.W 4
_IBUFHI_RX_SCC_A:DC.W 12

_IOREC_TX_SCC_A:

_IBUF_TX_SCC_A:DC.L $FFFFFFD0
_IBUFSIZE_TX_SCC_A:DC.W 16
_IBUFHD_TX_SCC_A:DC.W 0
_IBUFTL_TX_SCC_A:DC.W 0
_IBUFLOW_TX_SCC_A:DC.W 4
_IBUFHI_TX_SCC_A:DC.W 12

_UCR_SCC_A:DC.B $84
_PAR_CTRL_SCC_A:DC.B $EA
_FLAG_TX_XOFF_SCC_A:DC.B 0
_FLAG_RX_XOFF_SCC_A:DC.B 0
_FLOW_SCC_A:DC.B 0
_SEND_NOW_SCC_A:DC.B 0
_INDEX_SPEED_SCC_A:DC.B 0
_MASK_RX_SCC_A:DC.B $FF
_SPEED_SCC_A:DC.L 19200
_FLAGS_SCC_A:DC.L $7A
_MODE_PAR_SCC_A:DC.B $44
_MCTRL_SCC_A:DC.B 3

INIT_LAN:

 MOVEQ #1,D0
 AND FLAGS_LAN_SERIAL2,D0
 MOVE D0,D2
 BEQ.S \2
 OR.L #2,FLAGS_SCC_A
 BRA.S \1
\2:AND.L #$FFFFFFFD,FLAGS_SCC_A
 OR.B #$82,PAR_CTRL_SCC_A
 MOVE SR,D1
 OR #$700,SR
 MOVE.B #WR5,$FFFF8C81; Transmit parameters and control modes
 MOVE.B PAR_CTRL_SCC_A,$FFFF8C81
 MOVE D1,SR
\1:RTS

OPEN_SERIAL2:

 MOVEQ #-36,D0
 TST.B FLAGS_LAN_SERIAL2
 BEQ.S \2
 TST.B FLAGS_LAN_SERIAL2+1
 BEQ.S \1
\2:MOVE #$8001,FLAGS_LAN_SERIAL2
 BSR INIT_LAN
 MOVEQ #0,D0
\1:RTS

INIT_REG_SCC:

 LEA $FFFF8C81,A0
 LEA TAB_INIT_SCC(PC),A1
 MOVE SR,D2
 OR #$700,SR
 TST.B (A0)
\2:MOVE.B (A1)+,D0
  BEQ.S \3
  MOVE.B D0,(A0)
  MOVE.B (A1)+,(A0)
 BRA.S \2
\3:MOVE D2,SR
 MOVEQ #39,D1
 MOVE.L _HZ_200,D3
\1:MOVE SR,D2
  OR #$700,SR
  MOVE.B #RR3,(A0); Interrupt Pending register
  MOVE.B (A0),D0
  MOVE D2,SR
  AND.B #8,D0
  BEQ.S \1
  MOVE SR,D2
  OR #$700,SR
  MOVE.B #RR2,(A0); Interrupt Vector register
  TST.B (A0)
  MOVE D2,SR
  MOVE.B #$10,(A0)
  MOVE.B #$38,(A0)
 DBRA D1,\1
 RTS

TAB_INIT_SCC:
 
 DC.B WR9, $C0; Master Interrupt control and reset commands
 DC.B WR12,$FF; Lower byte of baud rate generator
 DC.B WR13,$FF; Upper byte of baud rate generator
 DC.B WR14,$03; Miscellaneous control bits
 DC.B WR15,$02; External status interrupt enable control
 DC.B WR1, $01; Transmit and Receive interrupts enables
 DC.B WR9, $20; Master Interrupt control and reset commands
 DC.B 0,0
 
INIT_RSCONF:

 TST.B $FFFF8C81
 TST.B $FFFF8C85
 MOVE.B #WR9,$FFFF8C81; Master Interrupt control and reset commands
 MOVE.B #$C0,$FFFF8C81
 LEA SCC_B_STCHANGE(PC),A0
 MOVE.L A0,$188
 LEA SCC_A_STCHANGE(PC),A0
 MOVE.L A0,$1A8
 MOVE.B #WR2,$FFFF8C81; Interrupt Vector
 MOVE.B #$60,$FFFF8C81; vecteur $180
 MOVE.B #WR15,$FFFF8C81; External status interrupt enable control
 MOVE.B #$20,$FFFF8C81
 MOVE.B #WR15,$FFFF8C85; External status interrupt enable control
 MOVE.B #$20,$FFFF8C85
 MOVE.B #WR1,$FFFF8C81; Transmit and Receive interrupts enables
 MOVE.B #$17,$FFFF8C81
 MOVE.B #WR1,$FFFF8C85; Transmit and Receive interrupts enables
 MOVE.B #$17,$FFFF8C85
 MOVEQ #-1,D0
 MOVE.L D0,-(SP);scr/tsr
 MOVE D0,-(SP);rsr
 MOVE #$88,-(SP);ucr
 CLR -(SP);ctrl
 MOVE #11,-(SP);baud
 BSR RSCONF_SCC_B
 LEA 12(SP),SP
 MOVEQ #-1,D0
 MOVE.L D0,-(SP);scr/tsr
 MOVE D0,-(SP);rsr
 MOVE #$88,-(SP);ucr
 CLR -(SP);ctrl
 CLR -(SP);baud
 BSR RSCONF_SCC_A
 LEA 12(SP),SP
 MOVEQ #$D,D0;B3: Master Interrupt Enable, B2: Disable Lower Chain, B0: Vector Includes Status 
 MOVE.B #WR9,$FFFF8C81; Master Interrupt control and reset commands
 MOVE.B D0,$FFFF8C81
 RTS
 
 END
