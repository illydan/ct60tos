/* TOS 4.04 Videl patch for the CT60 board
*  Didier Mequignon 2003 July, e-mail: didier.mequignon@wanadoo.fr
*
*  This library is free software; you can redistribute it and/or
*  modify it under the terms of the GNU Lesser General Public
*  License as published by the Free Software Foundation; either
*  version 2.1 of the License, or (at your option) any later version.
*
*  This library is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*  Lesser General Public License for more details.
*
*  You should have received a copy of the GNU Lesser General Public
*  License along with this library; if not, write to the Free Software
*  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

	.globl	picture_boot

#define measure_frame 0x3EC
#define measure_line  0x3F0
#define measure_clock 0x3F4
#define vbl_count     0x3F8
#define count_measure 0x3FA
#define _frclock      0x466
#define _hz_200       0x4BA
#define cookie        0x5A0
#define modecode      0x184C

#define WIDTH  320          // TGA uncompressed picture & screen 
#define HEIGHT 240
#define LOGO_CT60_WIDTH  15 // words
#define LOGO_CT60_HEIGHT 50 // lines
#define LOGO_MOT_WIDTH    4 // words
#define LOGO_MOT_HEIGHT  56 // lines

picture_boot:

	move.w #0x2300,SR
	movem.l D1-D4/A0-A3,-(SP)
	lea 0x10000,A0
	lea pic_boot+18(PC),A1                    // source TGA uncompressed 320 x 240
	move.l A0,A3
	move.w #HEIGHT-1,D1
	move.w #WIDTH*2,D3 
	btst #5,pic_boot+17(PC)
	bne.s pb1                                 // inverted
	move d1,D0
	mulu D3,D0
	neg.w D3
	add.l D0,A3
pb1:
	             move.l A3,A2
		move.w #WIDTH-1,D2
pb2:
			moveq #0,D0
		             move.b 2(A1),D0 // B
		             asl.l #8,D0
		             move.b 1(A1),D0 // G
		             asl.l #8,D0
		             move.b (A1),D0  // R
		             addq.w #3,A1    // source TC RGB
			lsr.l #3,D0     // 000RRRRR 321GGGGG 321BBBBB
			asl.b #2,D0     // 000RRRRR 321GGGGG 1BBBBB00
			asl.w #3,D0     // 000RRRRR GGGGG1BB BBB00000
			lsr.l #5,D0     // 00000000 RRRRRGGG GG1BBBBB
			bclr #5,D0
			move.w D0,(A2)+ // target NTC 65K colors
		dbf D2,pb2
		add.w D3,A3
	dbf D1,pb1
	lea pic_logo_ct60(PC),A1
	move.l A0,A3
	add.l #(HEIGHT-LOGO_CT60_HEIGHT)*WIDTH*2,A3
	moveq #LOGO_CT60_HEIGHT-1,D1
pb3:
		move.l A3,A2
		moveq #LOGO_CT60_WIDTH-1,D2
pb4:
			move.w (A1)+,D0
			moveq #15,D3
pb5:				
				btst D3,D0
				beq.s pb6
				move.w #0xF800,(A2) // red
pb6:				addq.w #2,A2
			dbf D3,pb5
		dbf D2,pb4
		add.w #WIDTH*2,A3
	dbf D1,pb3	
	lea pic_logo_mot(PC),A1
	move.l A0,A3
	add.l #(WIDTH-(LOGO_MOT_WIDTH*16))*2,A3
	moveq #LOGO_MOT_HEIGHT-1,D1
pb7:
		move.l A3,A2
		moveq #LOGO_MOT_WIDTH-1,D2
pb8:
			move.w (A1)+,D0
			moveq #15,D3
pb9:				
				btst D3,D0
				beq.s pb10
				move.w #0x001F,(A2) // blue
pb10:				addq.w #2,A2
			dbf D3,pb9
		dbf D2,pb8
		add.w #WIDTH*2,A3
	dbf D1,pb7	
	bsr screen_ntc_boot
	movem.l (SP)+,D1-D4/A0-A3
	moveq #0,D0
	rts

screen_ntc_boot:                     // 320 * 240 * 65K colors */

	movem.l D0-A1,-(SP)
	moveq #0,D7
	move.b 0xFFFF8006,D7
	lsr.w #6,D7             // 0:ST nomo, 1:ST col, 2:VGA, 3:TV
	beq v7                  // monochrome
	move.w SR,-(SP)
	or.w #0x700,SR          // no IRQ
	move.l A0,-(SP)         // adress screen
	lea.l 0xFFFF8200,A0     // VIDEL
	move.w #HEIGHT*2,D1
	lea.l videl_tv_320_240(PC),A1  
	cmp.w #2,D7             // VGA
	bne.s v2                // TV
	lea.l videl_vga_320_240(PC),A1
	add.w D1,D1
v2:
	move.l (A1)+,0x82(A0)   // hht,hbb
	move.l (A1)+,0x86(A0)   // hbe,hdb
	move.l (A1)+,0x8A(A0)   // hde,hss
	move.w (A1)+,0xA2(A0)   // vft
	movem.w (A1),D2-D5      // vbb,vbe,vdb,vde
	addq.w #8,A1
	move.w D5,D0            // vde
	sub.w D4,D0             // vdb
	sub.w D1,D0             // nb lines
	lsr.w #1,D0
	add.w D4,D0             // vdb
	add.w D0,D1
	cmp.w #2,D7
	bne.s v3                // TV
	move.w D0,D3            // vbe
	move.w D1,D2            // vbb
v3:
	movem.w D2/D3,0xA4(A0)  // vbb,vbe
	movem.w D0/D1,0xA8(A0)  // vdb,vde
	move.w (A1)+,0xAC(A0)   // vss
	move.b 1(SP),1(A0)      // adress high
	move.b 2(SP),3(A0)      // middle
	move.b 3(SP),0xD(A0)    // low
	addq.w #4,SP
	clr.w 0xE(A0)           // offset for next line (in words)
	bclr #0,0xA(A0)         // internal clock
	move.w #WIDTH,0x10(A0)  // words/line
	cmp.w #2,D7             // VGA
	beq.s v4                // VGA
	btst #5,modecode+1      // PAL
	beq.s v5
	bset #1,0xA(A0)         // PAL 50 Hz
	bra.s v4
v5:
	bclr #1,0xA(A0)         // NTSC 60 Hz
v4:
	move.w (A1)+,0xC2(A0)   // vco, pred video clock (pixel)
	move.w (A1),0xC0(A0)    // vco_hi, clock and monitor
	move.w #0x100,0x66(A0)  // 65536 colors => no palette
	clr.l 0xFFFF9800        // black border
	move.w (SP)+,SR
	bsr set_external_clock
	move.l _hz_200,D0
	add.l #400,D0           // tempo 2 S
v6:
		move.l _hz_200,D1
		cmp.l D0,D1
	blt.s v6
	bra.s v1
v7:	
	move.l A0,A1
	move.w #7999,D0         // 32KB mono for test videl clock
v8:		clr.l (A1)+
	dbf D0,v8
	move.w SR,-(SP)
	or.w #0x700,SR          // no IRQ
	move.l A0,-(SP)         // adress screen
	lea.l 0xFFFF8200,A0     // VIDEL
	lea.l videl_mono_640_400(PC),A1  
	move.l (A1)+,0x82(A0)   // hht,hbb
	move.l (A1)+,0x86(A0)   // hbe,hdb
	move.l (A1)+,0x8A(A0)   // hde,hss
	move.w (A1)+,0xA2(A0)   // vft
	move.l (A1)+,0xA4(A0)   // vbb,vbe
	move.l (A1)+,0xA8(A0)   // vdb,vde
	move.w (A1)+,0xAC(A0)   // vss
	move.b 1(SP),1(A0)      // adress high
	move.b 2(SP),3(A0)      // middle
	move.b 3(SP),0xD(A0)    // low
	addq.w #4,SP
	clr.w 0xE(A0)           // offset for next line (in words)
	bclr #0,0xA(A0)         // internal clock
	move.w 2(A1),0xC0(A0)   // vco_hi, clock and monitor
	move.b #2,0x60(A0)      // ST hight
	move.w #0x28,0x10(A0)   // words/line
	move.w (A1)+,0xC2(A0)   // vco, pred video clock (pixel)
	move.w (SP)+,SR
	bsr set_external_clock
v1:
	bclr #0,0xA(A0)         // internal clock
	movem.l (SP)+,D0-A1
	rts
	
set_external_clock:

	movem.l D0-D1/A0-A1,-(SP)
	lea.l 0xFFFF8200,A0     // VIDEL
	bclr #0,0xA(A0)         // internal clock
             bsr measure_clock_videl
	move.l cookie,D1
	beq.s .clock_ok
	move.l D1,A1
.find_cookie:
		tst.l (A1)
		beq.s .cookie_free
		addq.w #8,A1
	bra.s .find_cookie
.cookie_free:
             cmp.w #32,D0            // 32 MHz
             bls.s .clock_ok
	move.l 4(A1),12(A1)     // copy size
	move.l #0x5F465251,(A1)+// _FRQ
	move.l D0,(A1)+
	clr.l (A1)
	bset #0,0xA(A0)         // external clock
             bsr measure_clock_videl
	move.l 4(A1),12(A1)     // copy size
	move.l #0x5F465245,(A1)+// _FRE
	move.l D0,(A1)+
	clr.l (A1)
             cmp.w #32,D0            // 32 MHz
             beq.s .clock_ok
	bclr #0,0xA(A0)         // internal clock
.clock_ok:
	movem.l (SP)+,D0-D1/A0-A1
	rts
	
measure_clock_videl:                 // return value in MHz
                        
	movem.l D1-A6,-(SP)
	clr.l measure_frame     // nS
	clr.l measure_line      // nS * 100
	clr.l measure_clock     // nS * 100
	clr.w vbl_count
	move.w SR,-(SP)
	or.w #0x700,SR          // no IRQ
	lea irq_vbl_measure(PC),A0
	move.l 0x70,A4
	move.l A0,0x70
	lea irq_timer_b_measure(PC),A0
	move.l 0x120,A5
	move.l A0,0x120
	lea irq_timer_c_measure(PC),A0
	move.l 0x114,A6
	move.l A0,0x114
	move.w (SP)+,SR
	moveq #0,D1
	move.l _hz_200,D2
.wait_measure:
		move.l _hz_200,D0
		sub.l D2,D0
		cmp.l #100,D0           // time-out
		bge.s .timeout_measure
	move.l measure_clock,D1
	beq.s .wait_measure
.timeout_measure:
	move.l A4,0x70
	move.l A5,0x120
	move.l A6,0x114
	moveq #0,D0
	tst.l D1
	beq.s .no_clock
	move.l #100000,D0
	divu D1,D0
	ext.l D0
	addq.w #1,D0
	bclr #0,D0
.no_clock:
	movem.l (SP)+,D1-A6
	rts

irq_vbl_measure:	

	movem.l D0-D2/A0,-(SP)
	move.w SR,-(SP)
	or.w #0x700,SR          // no IRQ
	tst.w vbl_count
	bne.s .no_first_vbl
	lea 0xFFFFFA01,A0       // MFP
	bclr #0,6(A0)           // IERA
	bclr #0,0xA(A0)         // IPRA
	bclr #0,0xE(A0)         // ISRA
	clr.b 0x1A(A0)          // TBCR stop timer B
	move.b #10,0x20(A0)     // TBDR
	move.b #1,0x1A(A0)      // TBCR prediv /4 IRQ TIMER B at each 16.275 uS
	                        // 16.275 uS = (10*4)/(2.4576*10^6)
	bset #0,6(A0)           // IERA
	bset #0,0x12(A0)        // IMRA
	clr.w count_measure
	bra .end_vbl
.no_first_vbl:
	move.w count_measure,D0
	beq.s .no_measure
	mulu #16275,D0          // time in nS of a frame 
	move.l D0,measure_frame
	move.w 0xFFFF82A2,D1    // VFT
	lsr.w #1,D1             // number of lines
	divu D1,D0              // time in nS of a line
	mulu #100,D0            // * 100
	move.l D0,measure_line
	lsr.l #1,D0             // /2
	move.w 0xFFFF8282,D1    // HHT
	addq.w #2,D1            // time of a line, video counter
	cmp.w #128,D1
	bcc.s .high_hht
	asl.w #4,D1
	bra.s .div_1_clock
.high_hht:
	move.w 0xFFFF82C2,D2    // VCO pred clock
	btst #2,D2              // /2
	bne.s .div_2_clock
	btst #3,D2
	bne.s .div_2_clock      // /1
	add.w D1,D1             // /4
.div_2_clock:
	add.w D1,D1
.div_1_clock:
	divu D1,D0
	swap D0
	tst.w D0
	beq.s .no_rest
	add.l #0x10000,D0
.no_rest:
	swap D0
.no_measure:
	move.w D0,measure_clock+2
	lea 0xFFFFFA01,A0       // MFP
	bclr #0,0x12(A0)        // IMRA
	bclr #0,6(A0)           // IERA
	bclr #0,0xA(A0)         // IPRA
	bclr #0,0xE(A0)         // ISRA
	clr.b 0x1A(A0)          // TBCR stop timer B
.end_vbl:
	addq.w #1,vbl_count
	move.w (SP)+,SR
	movem.l (SP)+,D0-D2/A0
	addq.l #1,_frclock
	rte

irq_timer_b_measure:

	addq.w #1,count_measure
	bclr #0,0xFFFFFA0F      // MFP ISRA
	rte
	
irq_timer_c_measure:

	addq.l #1,_hz_200
	bclr #5,0xFFFFFA11      // MFP ISRB
	rte

//	       nb_h  BK  BK   DE  DE  top  nb_v  BK   BK  DE   DE   top   
//	       hht   hbb  hbe   hdb  hde  hss  vft   vbb   vbe  vdb   vde   vss
videl_vga_320_240:
	.short 0xC6,0x8D,0x15,0x2AC,0x91,0x96,0x419,0x3FF,0x3F,0x3F,0x3FF,0x415,5,0x186 // 25 MHz
videl_tv_320_240:
	.short 0xFE,0xCB,0x27,0x03A,0x9B,0xD8,0x271,0x265,0x2F,0x57,0x237,0x26B,0,0x181 // 32 MHz
videl_mono_640_400:
	.short 0x1A,0x00,0x00,0x20F,0x0C,0x14,0x3E9,0x000,0x00,0x43,0x363,0x2E7,8,0x180 // 32 MHz

pic_logo_mot:
	.short 0x0000,0x0000,0x3800,0x0000 
	.short 0x0000,0x000F,0xFFF0,0x0000 
	.short 0x0000,0x007F,0xFFFE,0x0000 
	.short 0x0000,0x01FC,0x003F,0x8000 
	.short 0x0000,0x07C0,0x0007,0xE000 
	.short 0x0000,0x0F00,0x0001,0xF000 
	.short 0x0000,0x3C10,0x0010,0x7C00 
	.short 0x0000,0x7818,0x0018,0x1C00 
	.short 0x0000,0xE018,0x0018,0x0F00 
	.short 0x0001,0xC038,0x0018,0x0700 
	.short 0x0003,0x8038,0x003C,0x0380 
	.short 0x0007,0x003C,0x003C,0x01C0 
	.short 0x0007,0x007C,0x003C,0x00E0 
	.short 0x000E,0x007C,0x007E,0x0070 
	.short 0x001C,0x007E,0x007E,0x0070 
	.short 0x001C,0x00FE,0x007E,0x0038 
	.short 0x0018,0x00FE,0x00FE,0x0038 
	.short 0x0038,0x00FF,0x00FF,0x001C 
	.short 0x0030,0x00FF,0x00FF,0x001C 
	.short 0x0070,0x01FF,0x00FF,0x000C 
	.short 0x0070,0x01FF,0x01FF,0x800E 
	.short 0x0060,0x01FF,0x81FF,0x800E 
	.short 0x0060,0x03FF,0x81FF,0x8006 
	.short 0x00E0,0x03FF,0x83FF,0xC006 
	.short 0x00E0,0x03FF,0xC3FF,0xC006 
	.short 0x00C0,0x03FF,0xC3FF,0xC007 
	.short 0x00C0,0x07FF,0xC7FF,0xC007 
	.short 0x00C0,0x07FF,0xE7FF,0xE007 
	.short 0x00C0,0x07FF,0xE7FF,0xE007 
	.short 0x00C0,0x0F83,0xE7C3,0xE007 
	.short 0x00C0,0x0F00,0xEF00,0xF007 
	.short 0x00E0,0x0E00,0xFE00,0xF006 
	.short 0x00E0,0x1E00,0x7E00,0x7006 
	.short 0x0060,0x1C00,0x3C00,0x7806 
	.short 0x0060,0x1C00,0x3C00,0x380E 
	.short 0x0060,0x3800,0x1800,0x380E 
	.short 0x0070,0x3800,0x1800,0x1C0C 
	.short 0x0030,0x3800,0x1000,0x1C1C 
	.short 0x0038,0x3000,0x0000,0x1C1C 
	.short 0x0038,0x7000,0x0000,0x0C38 
	.short 0x001C,0x7000,0x0000,0x0E38 
	.short 0x001C,0x7000,0x0000,0x0E70 
	.short 0x000E,0x0000,0x0000,0x0070 
	.short 0x0007,0x0000,0x0000,0x00E0 
	.short 0x0003,0x0000,0x0000,0x01C0 
	.short 0x0003,0x8000,0x0000,0x0380 
	.short 0x0001,0xC000,0x0000,0x0700 
	.short 0x0000,0xF000,0x0000,0x0E00 
	.short 0x0000,0x7800,0x0000,0x1C00 
	.short 0x0000,0x3C00,0x0000,0x7800 
	.short 0x0000,0x0F00,0x0001,0xF000 
	.short 0x0000,0x07C0,0x0007,0xC000 
	.short 0x0000,0x01F8,0x003F,0x8000 
	.short 0x0000,0x007F,0xFFFE,0x0000 
	.short 0x0000,0x000F,0xFFF0,0x0000 
	.short 0x0000,0x0000,0xFC00,0x0000 

pic_logo_ct60:                                                                                                                          
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0xFC27,0xFFFF,0x000E,0x03E0,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x000F,0x07E7,0x8F8F,0x0078,0x0E38,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x001C,0x01E7,0x0F87,0x03E0,0x1E3C,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0038,0x00E6,0x0F83,0x0780,0x1C1C,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0078,0x0064,0x0F81,0x0F00,0x3C1E,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x00F8,0x0064,0x0F81,0x1F00,0x3C1E,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x00F0,0x0020,0x0F80,0x1E00,0x7C1F,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x01F0,0x0000,0x0F80,0x3FF0,0x7C1F,0x0000,0x0000,0x0000,0x0000,0x0000 
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x01F0,0x0000,0x0F80,0x3C78,0x7C1F,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x01F0,0x0000,0x0F80,0x7C7C,0x7C1F,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x01F0,0x0000,0x0F80,0x7C3E,0x7C1F,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x01F0,0x0000,0x0F80,0x7C3E,0x7C1F,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x01F0,0x0000,0x0F80,0x7C3E,0x7C1F,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x00F0,0x0000,0x0F80,0x7C3E,0x7C1F,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x00F8,0x0000,0x0F80,0x7C3E,0x3C1E,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0078,0x0020,0x0F80,0x3C3E,0x3C1E,0x0000,0x0000,0x0000,0x0000,0x0000 
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x003C,0x0060,0x0F80,0x3C3C,0x1C1C,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x001E,0x00C0,0x0F80,0x1E38,0x1E3C,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x000F,0x0300,0x1FC0,0x0E70,0x0E38,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0xFC00,0x7FF0,0x03E0,0x03E0,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000 
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000 
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x003F,0xFE00,0x0F00,0x0000,0x0000,0x007C,0x8000,0x0000,0x0000,0x007F,0xF000,0x0000,0x0000,0x0000,0x0000
	.short 0x000F,0x0E00,0x0700,0x0000,0x0000,0x00C7,0x8000,0x0000,0x0000,0x001E,0x3800,0x0000,0x0002,0x0000,0x0000
	.short 0x000F,0x0200,0x0700,0x0000,0x0000,0x0181,0x8000,0x0000,0x0000,0x001E,0x1C00,0x0000,0x0006,0x0000,0x0000
	.short 0x000F,0x1200,0x0700,0x0000,0x0000,0x0180,0x8000,0x0000,0x0000,0x001E,0x1C00,0x0000,0x000E,0x0000,0x0000 
	.short 0x000F,0x103F,0x0703,0xE0F0,0x79E0,0x01C0,0x8F1E,0x7BC0,0x787B,0xC01E,0x1C0F,0x00F0,0x1F9F,0x83C3,0xDE00
	.short 0x000F,0x30E1,0x8706,0x739C,0x3BF0,0x01F8,0x070E,0x3CE1,0xCC3F,0xC01E,0x3839,0xC39C,0x618E,0x0E61,0xFE00
	.short 0x000F,0xF0E1,0xC70C,0x730C,0x3C70,0x00FF,0x070E,0x3861,0x8639,0xC01F,0xF030,0xC30C,0x608E,0x0C31,0xCE00
	.short 0x000F,0x30E1,0xC71C,0x770E,0x3870,0x007F,0x870E,0x3873,0xFE38,0x001E,0x3C70,0xE70E,0x7C0E,0x1FF1,0xC000
	.short 0x000F,0x1007,0xC71C,0x070E,0x3870,0x000F,0xC70E,0x3873,0xBE38,0x001E,0x1E70,0xE70E,0x3F0E,0x1DF1,0xC000
	.short 0x000F,0x1039,0xC71C,0x070E,0x3870,0x0103,0xC70E,0x3873,0x8038,0x001E,0x1E70,0xE70E,0x0F8E,0x1C01,0xC000
	.short 0x000F,0x0061,0xC71C,0x070E,0x3870,0x0181,0xC70E,0x3873,0x8038,0x001E,0x1E70,0xE70E,0x438E,0x1C01,0xC000
	.short 0x000F,0x00E1,0xC70E,0x130C,0x3870,0x0181,0xC71E,0x3861,0xC238,0x001E,0x1E30,0xC30C,0x618E,0x4E11,0xC000 
	.short 0x000F,0x00E3,0xC70F,0x239C,0x3870,0x01C3,0x83EE,0x3CE1,0xFC38,0x001E,0x3C39,0xC39C,0x710F,0x8FE1,0xC000
	.short 0x003F,0xC07D,0xCF83,0xC0F0,0x7CF8,0x013E,0x03CF,0x3BC0,0x787E,0x007F,0xF00F,0x00F0,0x5E07,0x03C3,0xF000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3800,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3800,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3800,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x7E00,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000

#include "pic_boot.S"
